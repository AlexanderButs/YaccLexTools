// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.2
// Machine:  COSMIC
// DateTime: 26/05/2013 00.21.34
// UserName: Ernesto
// Input file <E:\Progetti\ConsoleApplication4\ConsoleApplication4\MyLanguage.Language.grammar.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace MyLanguage
{
internal enum Token {error=60,
    EOF=61,NUMBER=62};

internal partial struct ValueType
{ 
			public int n; 
			public string s; 
	   }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal partial class MyLanguageParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[13];
  private static State[] states = new State[21];
  private static string[] nonTerms = new string[] {
      "line", "$accept", "exp", "term", "factor", "number", };

  static MyLanguageParser() {
    states[0] = new State(new int[]{62,11,40,12,42,-11,47,-11,59,-11,43,-11,45,-11},new int[]{-1,1,-3,3,-4,20,-5,19,-6,10});
    states[1] = new State(new int[]{61,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{59,4,43,6,45,15});
    states[4] = new State(new int[]{10,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{62,11,40,12,42,-11,47,-11,59,-11,43,-11,45,-11,41,-11},new int[]{-4,7,-5,19,-6,10});
    states[7] = new State(new int[]{42,8,47,17,59,-4,43,-4,45,-4,41,-4});
    states[8] = new State(new int[]{62,11,40,12,42,-11,47,-11,59,-11,43,-11,45,-11,41,-11},new int[]{-5,9,-6,10});
    states[9] = new State(-7);
    states[10] = new State(-9);
    states[11] = new State(-12);
    states[12] = new State(new int[]{62,11,40,12,42,-11,47,-11,41,-11,43,-11,45,-11},new int[]{-3,13,-4,20,-5,19,-6,10});
    states[13] = new State(new int[]{41,14,43,6,45,15});
    states[14] = new State(-10);
    states[15] = new State(new int[]{62,11,40,12,42,-11,47,-11,59,-11,43,-11,45,-11,41,-11},new int[]{-4,16,-5,19,-6,10});
    states[16] = new State(new int[]{42,8,47,17,59,-5,43,-5,45,-5,41,-5});
    states[17] = new State(new int[]{62,11,40,12,42,-11,47,-11,59,-11,43,-11,45,-11,41,-11},new int[]{-5,18,-6,10});
    states[18] = new State(-8);
    states[19] = new State(-6);
    states[20] = new State(new int[]{42,8,47,17,59,-3,43,-3,45,-3,41,-3});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,61});
    rules[2] = new Rule(-1, new int[]{-3,59,10});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,43,-4});
    rules[5] = new Rule(-3, new int[]{-3,45,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-4,42,-5});
    rules[8] = new Rule(-4, new int[]{-4,47,-5});
    rules[9] = new Rule(-5, new int[]{-6});
    rules[10] = new Rule(-5, new int[]{40,-3,41});
    rules[11] = new Rule(-6, new int[]{});
    rules[12] = new Rule(-6, new int[]{62});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // line -> exp, ';', '\n'
{ Console.WriteLine("result is {0}\n", ValueStack[ValueStack.Depth-3].n);}
        break;
      case 3: // exp -> term
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;}
        break;
      case 4: // exp -> exp, '+', term
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n + ValueStack[ValueStack.Depth-1].n;}
        break;
      case 5: // exp -> exp, '-', term
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n - ValueStack[ValueStack.Depth-1].n;}
        break;
      case 6: // term -> factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;}
        break;
      case 7: // term -> term, '*', factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n * ValueStack[ValueStack.Depth-1].n;}
        break;
      case 8: // term -> term, '/', factor
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-3].n / ValueStack[ValueStack.Depth-1].n;}
        break;
      case 9: // factor -> number
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n;}
        break;
      case 10: // factor -> '(', exp, ')'
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
